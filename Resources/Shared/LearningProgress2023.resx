<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Example" xml:space="preserve">
    <value>Example</value>
  </data>
  <data name="General knowledge" xml:space="preserve">
    <value>General knowledge</value>
  </data>
  <data name="HotChocolate" xml:space="preserve">
    <value>HotChocolate library</value>
  </data>
  <data name="HotChocolate description" xml:space="preserve">
    <value>HotChocolate library allows creation of GraphQL APIs in .NET. GraphQL may be considered as an alternative to REST, which allows (and requires) API consumers to query only for fields they need, unlike REST, which returns all available fields in its response. This library works well with Dependecy Injection and supports 3 different ways of defining API: Annotation-based, Code-first and Schema-first.</value>
  </data>
  <data name="JavaScript libs" xml:space="preserve">
    <value>JavaScript libraries</value>
  </data>
  <data name="JS functions and arrays" xml:space="preserve">
    <value>JavaScript functions and arrays</value>
  </data>
  <data name="JS functions and arrays code" xml:space="preserve">
    <value>"use strict";

function example()
{
    var numbers = [1,5,6,2,3,4,5,3,4,5];
    console.log("Numbers: ", numbers);
    console.log("Numbers less than 5: ", numbers.filter(n =&gt; n &lt; 5))
    console.log("Added value to numbers: ", 20);
    numbers.push(20);
    numbers.sort();
    console.log("In-place alphabetically sorted numbers: ", numbers);
    numbers.sort((a, b) =&gt; a - b);
    console.log("In-place numerically sorted (ascending): ", numbers);
}

example();</value>
  </data>
  <data name="JS functions and arrays description" xml:space="preserve">
    <value>Functions in JavaScript are defined with 'function' keyword followed by name of the function, opening bracket, comma-separeted argument list, closing bracket and then the function body. A function body can be written within curly braces or after the arrow operator '=&gt;', given it's a single statement. If the arrow operator is used, then return keyword doesn't have to be used to return a value.
Arrays can be defined within square brackets, and can contain different element types stored as a sequence. They can contain numbers, string, objects and arrays as their elements, which are indexed with whole numbers starting at 0.</value>
  </data>
  <data name="JS objects" xml:space="preserve">
    <value>Javascript objects</value>
  </data>
  <data name="JS objects code" xml:space="preserve">
    <value>"use strict";

function example()
{
    var car = { price: 20000, isNew: false };
    console.log("Original car: ", car);
    car.color = "blue";
    console.log("Painted car: ", car);
    delete car.price;
    console.log("Car without price: ", car);
}

example();</value>
  </data>
  <data name="JS objects description" xml:space="preserve">
    <value>Objects in JavaScript are defined within curly braces. When assigning an object to another variable, its content is not copied, only its reference, so they point to the same object, unlike primitive types which are stored as values. Properties of an object can be added and removed dynamically.</value>
  </data>
  <data name="JS types" xml:space="preserve">
    <value>JavaScript types</value>
  </data>
  <data name="JS types code" xml:space="preserve">
    <value>"use strict";

console.log("true is of type: ", typeof(true));
console.log("1 is of type: ", typeof(1));
console.log('"sentence" is of type: ', typeof("sentence"))
console.log("[1,2] is of type: ", typeof([1,2]));
console.log('{ "data": 123 } is of type: ', typeof({ "data": 123 }));
console.log("console.log is of type: ", typeof(console.log));</value>
  </data>
  <data name="JS types description" xml:space="preserve">
    <value>Types in JavaScript can be categorized into primitive types and object types. Primitive types' values are immutable, and these include: Null, Undefined, Boolean, Number, BigInt, String and Symbol. Object types' values are mutable, and these include types like functions and arrays. Objects consist of properties, which can contain data or functions or other objects.</value>
  </data>
  <data name="NuGet packages" xml:space="preserve">
    <value>NuGet packages</value>
  </data>
  <data name="Paged.js description" xml:space="preserve">
    <value>Paged.js is an open-source library that allows us to create well-looking PDF documents from our HTML pages, with optional preview right on the webpage.</value>
  </data>
  <data name="Source" xml:space="preserve">
    <value>Source</value>
  </data>
  <data name="System.Text.Json" xml:space="preserve">
    <value>Changes in System.Text.Json namespace</value>
  </data>
  <data name="System.Text.Json description" xml:space="preserve">
    <value>Starting with .NET 7, JSON contracts can be customized in two ways. First one is to create new instance of DefaultJsonTypeInfoResolver and add actions to its Modifiers property which will be called sequentially. Second method is to write a custom resolver implementing IJsonTypeInfoResolver, where GetTypeInfo should return null for unhandled types. Resolvers can be combined together, however only first non-null returning one will be used for any type.</value>
  </data>
  <data name="TPH, TPC, TPT" xml:space="preserve">
    <value>TPH, TPC, TPT approaches - mapping from type hierarchy to tables</value>
  </data>
  <data name="TPH, TPC, TPT description" xml:space="preserve">
    <value>When it comes to mapping type hierarchies to tables, there are 3 distinctive approaches: Table-per-Hierarchy (TPH), Table-per-Concrete-type (TPC) and Table-per-Type (TPT). TPH works by creating a single table with all possible properties from type hierarchy and works best when querying for entities of all types. TPC creates a different table for each concrete type and  works best when querying for leafs of the hierarchy. TPT defines a different table for each type and is the worst approach from the performace perspective, despite intiutively being the 'cleanest' solution.</value>
  </data>
  <data name="Year2023" xml:space="preserve">
    <value>2023</value>
  </data>
</root>