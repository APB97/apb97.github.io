@using apb97.github.io.Pages
@using apb97.github.io.Services

@implements IDisposable
@inject APB97StringLocalizer<IntegerToRoman> localization
@inject APB97StringLocalizerFactory LocalizationFactory

@if (ShouldRender())
{
    <div>
        <h4>@localization.Localize("Input")</h4>

        <div class="row">
            <div class="card-group">
                <label for="Number" style="margin: 4px">@localization.Localize("Number")</label>
                <InputNumber TValue="int?" Value="Number" ValueChanged="OnNumberChanged" ValueExpression="() => Number" type="number" min="1" max="3999" style="margin: 4px"/>
            </div>
        </div>

        <hr />
        <AdjustedAnchorHeading Id="@OutputId" FontSize="smaller">@localization.Localize("Output")</AdjustedAnchorHeading>
        <div class="row">
            <div class="card-group">
                <label style="margin: 4px">@localization.Localize("Roman")</label>

                <code role="status" style="margin: 3px; font-size:large">
                    @if (Number.HasValue)
                    {
                        <text>@ConvertToRoman(Number.Value)</text>
                    }
                </code>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    [Parameter]
    public int? Number { get; set; }

    [Parameter]
    public Action<int?> OnNumberChanged { get; set; } = delegate { };

    public const string OutputId = "output";

    protected string ConvertToRoman(int value)
    {
        try
        {
            return IntegerToRomanService.ToRoman(value);
        }
        catch (ArgumentOutOfRangeException)
        {
            return localization.Localize("Out of range") ?? string.Empty;
        }
    }

    protected override bool ShouldRender()
    {
        if (localization.Localization == null) return false;
        return base.ShouldRender();
    }

    protected override async Task OnInitializedAsync()
    {
        await localization.InitializeAsync();
    }

    protected override void OnInitialized()
    {
        MainLayout.OnStateChanging += GetResources;
    }

    void IDisposable.Dispose()
    {
        MainLayout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        localization = new APB97StringLocalizer<IntegerToRoman>(LocalizationFactory);
        await localization.InitializeAsync();
        StateHasChanged();
    }
}
