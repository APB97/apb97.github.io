@using apb97.github.io.Pages
@using apb97.github.io.Services
@inject IStringLocalizer<IntegerToRoman> Localizer

<div>
    <h4>@LanguageSelect.GetStringSafely(Localizer, "Input")</h4>

    <div class="row">
        <div class="card-group">
            <label for="Number" style="margin: 4px">@LanguageSelect.GetStringSafely(Localizer, "Number")</label>
            <InputNumber TValue="int?" Value="Number" ValueChanged="OnNumberChanged" ValueExpression="() => Number" type="number" min="1" max="3999" style="margin: 4px"/>
        </div>
    </div>

    <hr />
    <AdjustedAnchorHeading Id="@OutputId" FontSize="smaller">@LanguageSelect.GetStringSafely(Localizer, "Output")</AdjustedAnchorHeading>
    <div class="row">
        <div class="card-group">
            <label style="margin: 4px">@LanguageSelect.GetStringSafely(Localizer, "Roman")</label>

            <code role="status" style="margin: 3px; font-size:large">
                @if (Number.HasValue)
                {
                    <text>@ConvertToRoman(Number.Value)</text>
                }
            </code>
        </div>
    </div>

</div>

@code {
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    [Parameter]
    public int? Number { get; set; }

    [Parameter]
    public Action<int?> OnNumberChanged { get; set; } = delegate { };

    public const string OutputId = "output";

    protected string ConvertToRoman(int value)
    {
        try
        {
            return IntegerToRomanService.ToRoman(value);
        }
        catch (ArgumentOutOfRangeException)
        {
            return LanguageSelect.GetStringSafely(Localizer, "Out of range", Layout.Language) ?? string.Empty;
        }
    }
}
