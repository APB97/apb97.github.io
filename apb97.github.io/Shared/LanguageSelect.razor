@using System.Globalization
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Logging.Abstractions
@using Microsoft.Extensions.Options
@using System.Reflection
@using System.Resources
@using apb97.github.io.Extensions
@using apb97.github.io.Services

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject APB97StringLocalizer<LanguageSelect> localization
@inject APB97StringLocalizerFactory LocalizationFactory

@if (ShouldRender())
{
    <label class="text-white">
        @(localization.Localize("Select your locale")):
    </label>
    <InputSelect style="background-color: transparent; border: none; color: white;" TValue="CultureInfo" DisplayName="Locale" Value="@CurrentUICulture" ValueChanged="SetCultureAndReload" ValueExpression="() => CurrentUICulture">
        @foreach (var culture in supportedCultures)
        {
            <option value="@culture.Value" class="@(culture.Value.Name == Culture.Name ? "current" : null)">@culture.Key</option>
        }
    </InputSelect>
}

@code
{
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    public CultureInfo CurrentUICulture { get => Culture; private set => Culture = value; }

    public static CultureInfo Culture { get; private set; } = CultureInfo.CurrentUICulture;

    private readonly IReadOnlyDictionary<string, CultureInfo> supportedCultures = new Dictionary<string, CultureInfo>
    {
        { "English", CultureInfo.CreateSpecificCulture("en") },
        { "Polski", CultureInfo.CreateSpecificCulture("pl") }
    };

    protected override bool ShouldRender()
    {
        if (localization.Localization == null) return false;
        return base.ShouldRender();
    }

    protected override async Task OnInitializedAsync()
    {
        localization = new APB97StringLocalizer<LanguageSelect>(LocalizationFactory);
        await localization.InitializeAsync(CultureInfo.CurrentUICulture);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await localization.InitializeAsync(Culture);
            StateHasChanged();
        }
    }

    private async Task SetCultureAndReload(CultureInfo value)
    {
        CultureInfo.CurrentCulture = CultureInfo.CurrentUICulture = Culture = value;

        localization = new APB97StringLocalizer<LanguageSelect>(LocalizationFactory);
        await localization.InitializeAsync(value);

        StateHasChanged();

        Layout.NotifyStateChanged();

        await JSRuntime.InvokeVoidAsync("blazorCulture.set", value.Name);
    }
}