@using System.Globalization
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Logging.Abstractions
@using Microsoft.Extensions.Options
@using System.Reflection
@using System.Resources
@using apb97.github.io.Extensions
@using apb97.github.io.Services

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IStringLocalizer<LanguageSelect> Localizer
@inject APB97StringLocalizerFactory LocalizationFactory

<label class="text-white">
    @(localization.Localize("Select your locale")):
</label>
<InputSelect style="background-color: transparent; border: none; color: white;" TValue="CultureInfo" DisplayName="Locale" Value="@Culture" ValueChanged="SetCultureAndReload" ValueExpression="() => Culture">
    @foreach (var culture in supportedCultures)
    {
        <option value="@culture.Value" class="@(culture.Value.Name == Culture.Name ? "current" : null)">@culture.Key</option>
    }
</InputSelect>

@code
{
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    public CultureInfo Culture { get; private set; } = CultureInfo.CurrentUICulture;

    private readonly IReadOnlyDictionary<string, CultureInfo> supportedCultures = new Dictionary<string, CultureInfo>
    {
        { "English", CultureInfo.CreateSpecificCulture("en") },
        { "Polski", CultureInfo.CreateSpecificCulture("pl") }
    };

    private Dictionary<string, string> localization = [];

    protected override async Task OnInitializedAsync()
    {
        localization = await LocalizationFactory.GetLocalization<LanguageSelect>(Culture);
    }

    private async Task SetCultureAndReload(CultureInfo value)
    {
        CultureInfo.CurrentCulture = CultureInfo.CurrentUICulture = Culture = value;

        localization = await LocalizationFactory.GetLocalization<LanguageSelect>(value);
        
        StateHasChanged();

        Layout.NotifyStateChanged();

        await JSRuntime.InvokeVoidAsync("blazorCulture.set", value.Name);
    }
}