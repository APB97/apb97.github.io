@using System.Globalization
@using Microsoft.Extensions.Logging.Abstractions
@using Microsoft.Extensions.Options
@using System.Reflection
@using System.Resources
@using apb97.github.io.Extensions
@using apb97.github.io.Services

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject StringLocalizer<LanguageSelect> localization

<label class="text-white">
    @(localization.Localize("Select your locale")):
</label>
<InputSelect style="background-color: transparent; border: none; color: white;" TValue="string" DisplayName="Locale" Value="@CurrentUICulture" ValueChanged="SetCultureAndReload" ValueExpression="() => CurrentUICulture">
    @foreach (var culture in supportedCultures)
    {
        <option value="@culture.Value" class="@(culture.Value == Culture ? "current" : null)">@culture.Key</option>
    }
</InputSelect>

@code
{
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    public string? CurrentUICulture { get => Culture; private set => Culture = value; }

    public static string? Culture { get; private set; }

    private readonly static IReadOnlyDictionary<string, string> supportedCultures = new Dictionary<string, string>
    {
        { "English", "en-US" },
        { "Polski", "pl-PL" }
    };

    protected override bool ShouldRender()
    {
        return localization.IsReady;
    }

    protected override async Task OnInitializedAsync()
    {
        var language = await JSRuntime.InvokeAsync<string>("blazorCulture.get");
        Culture = language ?? "en-US";
        await localization.InitializeAsync(Culture);
        Layout.NotifyStateChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await localization.InitializeAsync(Culture);
            StateHasChanged();
        }
    }

    private async Task SetCultureAndReload(string value)
    {
        Culture = value;
        await localization.InitializeAsync(value);

        StateHasChanged();

        Layout.NotifyStateChanged();

        await JSRuntime.InvokeVoidAsync("blazorCulture.set", value);
    }
}