@implements IDisposable
@inject StringLocalizer<Projects> Loc
@inject IJSRuntime JS

@if (ShouldRender())
{
    <AdjustedAnchorHeading Id="projects" Heading="@Loc["Projects"]">
        <div class="d-flex" style="border: medium solid dodgerblue; margin: 2pt;">
            <div class="d-flex flex-column flex-grow-1" style="flex-basis: 0;">
                <div class="text-center flex-grow-1">
                    <a class="link-primary" onclick="history.replaceState(null, '', document.location.href);document.location.assign('/WebSudoku/');">
                        <span>Web Sudoku</span>
                    </a>
                    <p>@Loc["Web Sudoku description"]</p>
                </div>
                <div class="text-center">
                    <div class="tags">
                        <span>@Loc[".NET"]</span>
                        <span>@Loc["C#"]</span>
                        <span>@Loc["Blazor"]</span>
                        <span>@Loc["WebAssembly"]</span>
                        <span>@Loc["HTML"]</span>
                        <span>@Loc["CSS"]</span>
                        <span>@Loc["JS"]</span>
                    </div>
                </div>
            </div>
            <div class="skill-card" style="border: none !important;">
                <div class="h-100" style="align-content: center; vertical-align: middle;">
                    @if (Layout.LayoutMode == MainLayout.LightMode)
                    {
                        <img alt="Web Sudoku Screenshot in Light mode" src="images/Screenshot - Web Sudoku.png" style="width: 100%;" />
                    }
                    else
                    {
                        <img alt="Web Sudoku Screenshot in Dark mode" src="images/Screenshot - Web Sudoku Dark.png" style="width: 100%;" />
                    }
                </div>
            </div>
        </div>

        <div class="d-flex">
            <div style="border: medium solid darkslategray; margin: 2pt;">
                <div class="text-center">
                    <a class="link-primary" href="MetadataRename"><span>Metadata Rename</span></a>
                    <p>@Loc["Rename based on metadata built with WPF."] </p>
                </div>
            </div>

            <div class="flex-grow-1" style="border: medium solid darkslategray; margin: 2pt;">
                <div class="text-center">
                    <a class="link-primary" href="PlotAndIntegrate"><span>Plot and Integrate</span></a>
                    <p>@Loc["Plot and calculate definite integral of a function. Built with Windows Forms."] </p>
                </div>
            </div>
        </div>
    </AdjustedAnchorHeading>
}

@code{
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    protected override bool ShouldRender()
    {
        return Loc.IsReady;
    }

    protected override async Task OnInitializedAsync()
    {
        await Loc.InitializeAsync(Layout.Culture);
    }

    protected override void OnInitialized()
    {
        Layout.OnStateChanging += GetResources;
    }

    void IDisposable.Dispose()
    {
        Layout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        await Loc.InitializeAsync(Layout.Culture);
        StateHasChanged();
    }
}
