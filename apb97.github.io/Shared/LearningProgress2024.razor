@implements IReadyable
@implements IDisposable
@inject StringLocalizer<LearningProgress2024> Loc

<h3>@Loc["Year2024"]</h3>

<ul>
    <li>
        <h4>@Loc["C# features"]</h4>
        <ul>
            <li>
                <b>@Loc["Records"]</b>
                <br />
                <span>@Loc["Records description"]</span>
                <ul>
                    <li>@Loc["Concise syntax for reference types"]</li>
                    <li>@Loc["Built-in value equality"]</li>
                    <li>@Loc["Built-in concise syntax for nondesctructive mutation"]</li>
                    <li>@Loc["Built-in formatting"]</li>
                </ul>
            </li>
            <li>
                <b>@Loc["Constant interpolated strings"]</b>
                <br />
                <p>@Loc["Constant interpolated strings description"]</p>
            </li>
        </ul>
    </li>
    <li>
        <h4>@Loc["NuGet packages"]</h4>
        <ul>
            <li>
                <b>StrawberryShake</b>
                <br />
                <p>@Loc["StrawberryShake description"]</p>
            </li>
        </ul>
    </li>
    <li>
        <h4>@Loc["Linux commands"]</h4>
        <ul>
            <li>
                <b>@Loc["Basic"]</b>
                <br />
                @Loc["Linux basic commands"]
            </li>
            <li>
                <b>@Loc["Advanced"]</b>
                <br />
                @Loc["Linux advanced commands"]
            </li>
        </ul>
    </li>
</ul>
@if (IsReady == false && Loc.IsReady)
{
    IsReady = true;
    OnReady();
}

@code {
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    [Parameter]
    public required Action OnReady { get; set; }

    public bool IsReady { get; private set; }

    protected override bool ShouldRender()
    {
        if (!Loc.IsReady) return false;
        return base.ShouldRender();
    }

    protected override async Task OnInitializedAsync()
    {
        await Loc.InitializeAsync(Layout.Culture);
    }

    protected override void OnInitialized()
    {
        Layout.OnStateChanging += GetResources;
    }

    void IDisposable.Dispose()
    {
        Layout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        await Loc.InitializeAsync(Layout.Culture);
        StateHasChanged();
    }
}