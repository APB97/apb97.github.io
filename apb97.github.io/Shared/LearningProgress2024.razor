@implements IDisposable
@inject APB97StringLocalizerFactory LocalizationFactory

<h3>@localization.Localize("Year2024")</h3>

<ul>
    <li>
        <h4>@localization.Localize("C# features")</h4>
        <ul>
            <li>
                <b>@localization.Localize("Records")</b>
                <br />
                <span>@localization.Localize("Records description")</span>
                <ul>
                    <li>@localization.Localize("Concise syntax for reference types")</li>
                    <li>@localization.Localize("Built-in value equality")</li>
                    <li>@localization.Localize("Built-in concise syntax for nondesctructive mutation")</li>
                    <li>@localization.Localize("Built-in formatting")</li>
                </ul>
            </li>
            <li>
                <b>@localization.Localize("Constant interpolated strings")</b>
                <br />
                <p>@localization.Localize("Constant interpolated strings description")</p>
            </li>
        </ul>
    </li>
    <li>
        <h4>@localization.Localize("NuGet packages")</h4>
        <ul>
            <li>
                <b>StrawberryShake</b>
                <br />
                <p>@localization.Localize("StrawberryShake description")</p>
            </li>
        </ul>
    </li>
    <li>
        <h4>@localization.Localize("Linux commands")</h4>
        <ul>
            <li>
                <b>@localization.Localize("Basic")</b>
                <br />
                @localization.Localize("Linux basic commands")
            </li>
            <li>
                <b>@localization.Localize("Advanced")</b>
                <br />
                @localization.Localize("Linux advanced commands")
            </li>
        </ul>
    </li>
</ul>

@code {
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    private Dictionary<string, string> localization = [];

    protected override async Task OnInitializedAsync()
    {
        localization = await LocalizationFactory.GetLocalization<LearningProgress2024>(Layout.Language ?? System.Globalization.CultureInfo.CurrentUICulture);
    }

    protected override void OnInitialized()
    {
        MainLayout.OnStateChanging += GetResources;
    }

    void IDisposable.Dispose()
    {
        MainLayout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        localization = await LocalizationFactory.GetLocalization<LearningProgress2024>(Layout.Language ?? System.Globalization.CultureInfo.CurrentUICulture);
        StateHasChanged();
    }
}