@implements IDisposable

@inject StringLocalizer<Challenges> Loc
@inject IJSRuntime JS

@if (ShouldRender())
{
    <AdjustedAnchorHeading Id="challenges" Heading="@Loc["Challenges"]">
        <div class="d-flex" style="font-size: larger">
            <ul style="list-style-type: none;">
                <li>
                    <a class="link-primary" href="/IntegerToRoman"><span>@Loc["Integer to Roman"]</span></a>
                </li>
                <li>
                    <a class="link-primary" href="/CountAndSay"><span>@Loc["Count and say"]</span></a>
                </li>
            </ul>
        </div>
    </AdjustedAnchorHeading>
}

@code {
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    protected override bool ShouldRender()
    {
        return Loc.IsReady;
    }

    protected override async Task OnInitializedAsync()
    {
        await Loc.InitializeAsync(Layout.Culture);
    }

    protected override void OnInitialized()
    {
        Layout.OnStateChanging += GetResources;
    }

    void IDisposable.Dispose()
    {
        Layout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        await Loc.InitializeAsync(Layout.Culture);
        StateHasChanged();
    }
}
