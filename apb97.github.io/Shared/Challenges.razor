@implements IDisposable

@inject APB97StringLocalizer<Challenges> localization
@inject IJSRuntime JS
@inject APB97StringLocalizerFactory LocalizationFactory

@if (ShouldRender())
{
    <AdjustedAnchorHeading Id="challenges">@localization.Localize("Challenges")</AdjustedAnchorHeading>

    <div class="d-flex">
        <div class="skill-card">
            <h4 class="text-center">@localization.Localize("Integer to Roman")</h4>
            <div class="text-center">
                <a class="link-primary" href="/IntegerToRoman">@localization.Localize("See this challenge")</a>
            </div>
        </div>
        <div class="skill-card">
            <h4 class="text-center">@localization.Localize("Count and say")</h4>
            <div class="text-center">
                <a class="link-primary" href="/CountAndSay">@localization.Localize("See this challenge")</a>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public required MainLayout Layout { get; set; }
    
    protected override bool ShouldRender()
    {
        if (localization.Localization == null) return false;
        return base.ShouldRender();
    }

    protected override async Task OnInitializedAsync()
    {
        localization = new APB97StringLocalizer<Challenges>(LocalizationFactory);
        await localization.InitializeAsync(Layout.Language);
    }

    protected override void OnInitialized()
    {
        MainLayout.OnStateChanging += GetResources;
    }

    void IDisposable.Dispose()
    {
        MainLayout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        localization = new APB97StringLocalizer<Challenges>(LocalizationFactory);
        await localization.InitializeAsync(Layout.Language);
        StateHasChanged();
    }
}
