@implements IReadyable
@implements IDisposable
@inject StringLocalizer<LearningProgress2022> Loc

<h3>@Loc["Year2022-last-weeks"]</h3>
<ul>
    <li>
        <h4>C#</h4>
        <ul>
            <li>
                <b>@Loc["Extended property pattern"]</b>
                <br />
                <p>@Loc["Extended property pattern description"]</p>
                <b>@Loc["Example"]</b>
                <br />
                <CodeView Code="@Loc["Extended property pattern code"]"></CodeView>
            </li>
            <li>
                <b>@Loc["Global using directive"]</b>
                <br />
                <p>@Loc["Global using directive description"]</p>
                <b>@Loc["Example"]</b>
                <br />
                <CodeView Code="@Loc["Global using directive code"]" />
            </li>
            <li>
                <b>@Loc["File-scoped namespace declaration"]</b>
                <br />
                <p>@Loc["File-scoped namespace declaration description"]</p>
                <b>@Loc["Example"]</b>
                <br />
                <CodeView Code="@Loc["File-scoped namespace declaration code"]" />
            </li>
        </ul>
    </li>
</ul>
@if (IsReady == false && Loc.IsReady)
{
    IsReady = true;
    OnReady();
}

@code {
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    [Parameter]
    public required Action OnReady { get; set; }

    public bool IsReady { get; private set; }

    protected override bool ShouldRender()
    {
        return Loc.IsReady;
    }

    protected override async Task OnInitializedAsync()
    {
        await Loc.InitializeAsync(Layout.Culture);
    }
    
    protected override void OnInitialized()
    {
        Layout.OnStateChanging += GetResources;
    }

    void IDisposable.Dispose()
    {
        Layout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        await Loc.InitializeAsync(Layout.Culture);
        StateHasChanged();
    }
}