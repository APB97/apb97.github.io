@implements IAsyncDisposable

@inject NavigationManager Navigation
@inject IJSRuntime JS

@if (!Rendered)
{
    Rendered = true;
    Task.CompletedTask.ContinueWith(async t =>
    {
        if (module is null)
            module = await JS.ImportAsync("./Shared/NavigationByIdFix.razor.js");
        var urlSplit = Navigation.Uri.Split('#');
        if (module is null) return;
        if (urlSplit.Length == 2)
            await module.InvokeVoidAsync("activateCurrentLink", Navigation.Uri, $"#{urlSplit[1]}");
        else if (urlSplit.Length == 1)
            await module.InvokeVoidAsync("activateCurrentLink", null, null);
    });
}

@code{
    private IJSObjectReference? module;

    public bool Rendered { get; private set; }

    protected override async Task OnInitializedAsync()
    {
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}