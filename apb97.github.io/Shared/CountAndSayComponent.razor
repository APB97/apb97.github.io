@using System.Text
@using System.Resources
@using apb97.github.io.Pages
@using apb97.github.io.Services

@implements IDisposable
@inject CountAndSayService Service
@inject APB97StringLocalizerFactory LocalizationFactory

<div>
    <h4>@localization.Localize("Input")</h4>

    <div class="row">
        <div class="card-group">
            <label for="Number" style="margin: 4px">@localization.Localize("NumberOfSayings")</label>
            <InputNumber TValue="int?" Value="NumberOfSayings" ValueExpression="() => NumberOfSayings" ValueChanged="OnNumberChanged" type="number" min="1" max="30" style="margin: 4px"/>
        </div>
    </div>

    @{
        var results = GetResults();
    }
    <hr />
    <AdjustedAnchorHeading Id="@OutputId" FontSize="smaller">@localization.Localize("Output")</AdjustedAnchorHeading>
    <div class="row">
        <div class="card-group">
            <label style="margin: 4px">@localization.Localize("Result")</label>

            <code role="status" style="margin: 3px; font-size:large; overflow-wrap: anywhere">
                @results.result
            </code>
        </div>
    </div>

    <h4>@localization.Localize("Explanation")</h4>
    <div class="row">
        <p role="status">
            @{
                int i = 1;
                foreach (var explanation in results.explanation)
                {
                    <p>
                        <b>@(++i): </b>
                        @explanation
                    </p>
                }
            }
        </p>
    </div>
</div>

@code {
    public const string OutputId = "output";

    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    [Parameter]
    public int? NumberOfSayings { get; set; }

    [Parameter]
    public Action<int?> OnNumberChanged { get; set; } = delegate { };

    private Dictionary<string, string> localization = [];

    protected override async Task OnInitializedAsync()
    {
        localization = await LocalizationFactory.GetLocalization<CountAndSay>(Layout.Language ?? System.Globalization.CultureInfo.CurrentUICulture);
    }

    protected override void OnInitialized()
    {
        MainLayout.OnStateChanging += GetResources;
    }

    void IDisposable.Dispose()
    {
        MainLayout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        localization = await LocalizationFactory.GetLocalization<CountAndSay>(Layout.Language ?? System.Globalization.CultureInfo.CurrentUICulture);
        StateHasChanged();
    }

    protected (string result, IEnumerable<string> explanation) GetResults()
    {
        if (!NumberOfSayings.HasValue)
        {
            return (string.Empty, Array.Empty<string>());
        }

        try
        {
            var stringBuilder = new StringBuilder();
            var result = Service.CountAndSay(NumberOfSayings.Value, stringBuilder);
            return (result, stringBuilder.ToString().Split("<br/>", StringSplitOptions.RemoveEmptyEntries));
        }
        catch (ArgumentOutOfRangeException)
        {
            return (localization.Localize("Out of range") ?? string.Empty, Array.Empty<string>());
        }
    }
}
