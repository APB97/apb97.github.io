@page "/IntegerToRoman"
@page "/IntegerToRoman/{Number:int?}"
@using Microsoft.Extensions.Localization
@using apb97.github.io.Shared

@implements IDisposable
@inject APB97StringLocalizer<IntegerToRoman> localization
@inject APB97StringLocalizerFactory LocalizationFactory
@inject NavigationManager Navigation

@if (ShouldRender())
{
    <PageTitle>Adrian Bieliński - @localization.Localize("Integer to Roman")</PageTitle>

    <h1>@localization.Localize("Integer to Roman")</h1>
    <hr/>
    <h4>@localization.Localize("Challenge description")</h4>

    <p>@localization.Localize("Roman numerals are represented by")<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> @localization.Localize("and") <code>M</code>.</p>
    <p>@localization.Localize("They represent the following")<code>1</code>, <code>5</code>, <code>10</code>, <code>50</code>, <code>100</code>, <code>500</code>, <code>1000</code>.</p>
    <p>
        @localization.Localize("For example,") <code>3</code> @localization.Localize("is written as") <code>III</code> @localization.Localize("in Roman numeral,")
        <code>12</code> @localization.Localize("is written as") <code>XII</code> @localization.Localize("and") <code>28</code> @localization.Localize("is written as") <code>XXVIII</code>.
    </p>
    <p>
        @localization.Localize("Roman numerals are usually")
        @localization.Localize("However the numeral for") <code>4</code> @localization.Localize("is not") <code>IIII</code> @localization.Localize(", but it is") <code>IV</code> (5 - 1). @localization.Localize("Similarly") <code>9</code> @localization.Localize("is written as") <code>IX</code> (10 - 1).
        @localization.Localize("Subtraction is used")
        <ul>
            <li>
                <code>I</code> @localization.Localize("can be placed before") <code>V</code> @localization.Localize("and") <code>X</code> @localization.Localize("to make") <code>4</code> @localization.Localize("and") <code>9</code>.
            </li>
            <li>
                <code>X</code> @localization.Localize("can be placed before") <code>L</code> @localization.Localize("and") <code>C</code> @localization.Localize("to make") <code>40</code> @localization.Localize("and") <code>90</code>.
            </li>
            <li>
                <code>C</code> @localization.Localize("can be placed before") <code>D</code> @localization.Localize("and") <code>M</code> @localization.Localize("to make") <code>400</code> @localization.Localize("and") <code>900</code>.
            </li>
        </ul>
    </p>
    <br/>
    <p>@localization.Localize("Given an integer convert it")</p>

    <h4>@localization.Localize("Note")</h4>
    <p>@localization.Localize("You can use the url")</p>

    <div>
        <h4>@localization.Localize("Input")</h4>

        <div class="row">
            <div class="card-group">
                <label for="Number" style="margin: 4px">@localization.Localize("Number")</label>
                <InputNumber TValue="int?" Value="Number" ValueChanged="OnNumberChanged" ValueExpression="() => Number" type="number" min="1" max="3999" style="margin: 4px" />
            </div>
        </div>

        <hr />
        <AdjustedAnchorHeading Id="@OutputId" FontSize="smaller">@localization.Localize("Output")</AdjustedAnchorHeading>
        <div class="row">
            <div class="card-group">
                <label style="margin: 4px">@localization.Localize("Roman")</label>

                <code role="status" style="margin: 3px; font-size:large">
                    @if (Number.HasValue)
                    {
                        <text>@ConvertToRoman(Number.Value)</text>
                    }
                </code>
            </div>
        </div>
    </div>
}
@code {
    public const string OutputId = "output";

    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    [Parameter]
    public int? Number { get; set; }

    private int? prev;

    private void OnNumberChanged(int? number)
    {
        if (number.HasValue && number != Number)
        {
            Navigation.NavigateTo($"/IntegerToRoman/{number.Value}#{OutputId}");
        }
    }

    protected override bool ShouldRender()
    {
        if (localization.Localization == null) return false;
        return base.ShouldRender();
    }

    protected override async Task OnInitializedAsync()
    {
        localization = new APB97StringLocalizer<IntegerToRoman>(LocalizationFactory);
        await localization.InitializeAsync(Layout.Language);
    }

    protected override void OnInitialized()
    {
        MainLayout.OnStateChanging += GetResources;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) return;
        if (!Number.HasValue) return;
        var target = $"/IntegerToRoman/{Number.Value}#{OutputId}";
        if (Number.HasValue && !prev.HasValue)
        {
            Navigation.NavigateTo(target);
            prev = Number;
        }
    }

    protected string ConvertToRoman(int value)
    {
        try
        {
            return IntegerToRomanService.ToRoman(value);
        }
        catch (ArgumentOutOfRangeException)
        {
            return localization.Localize("Out of range") ?? string.Empty;
        }
    }

    void IDisposable.Dispose()
    {
        MainLayout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        localization = new APB97StringLocalizer<IntegerToRoman>(LocalizationFactory);
        await localization.InitializeAsync(Layout.Language);
        StateHasChanged();
    }
}