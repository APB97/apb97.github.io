@page "/IntegerToRoman"
@page "/IntegerToRoman/{Number:int?}"
@using Microsoft.Extensions.Localization
@using apb97.github.io.Shared

@implements IDisposable
@inject APB97StringLocalizerFactory LocalizationFactory
@inject NavigationManager Navigation

<PageTitle>Adrian Bieliński - @localization.Localize("Integer to Roman")</PageTitle>

<h1>@localization.Localize("Integer to Roman")</h1>
<hr/>
<h4>@localization.Localize("Challenge description")</h4>

<p>@localization.Localize("Roman numerals are represented by")<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> @localization.Localize("and") <code>M</code>.</p>
<p>@localization.Localize("They represent the following")<code>1</code>, <code>5</code>, <code>10</code>, <code>50</code>, <code>100</code>, <code>500</code>, <code>1000</code>.</p>
<p>
    @localization.Localize("For example,") <code>3</code> @localization.Localize("is written as") <code>III</code> @localization.Localize("in Roman numeral,")
    <code>12</code> @localization.Localize("is written as") <code>XII</code> @localization.Localize("and") <code>28</code> @localization.Localize("is written as") <code>XXVIII</code>.
</p>
<p>
    @localization.Localize("Roman numerals are usually")
    @localization.Localize("However the numeral for") <code>4</code> @localization.Localize("is not") <code>IIII</code> @localization.Localize(", but it is") <code>IV</code> (5 - 1). @localization.Localize("Similarly") <code>9</code> @localization.Localize("is written as") <code>IX</code> (10 - 1).
    @localization.Localize("Subtraction is used")
    <ul>
        <li>
            <code>I</code> @localization.Localize("can be placed before") <code>V</code> @localization.Localize("and") <code>X</code> @localization.Localize("to make") <code>4</code> @localization.Localize("and") <code>9</code>.
        </li>
        <li>
            <code>X</code> @localization.Localize("can be placed before") <code>L</code> @localization.Localize("and") <code>C</code> @localization.Localize("to make") <code>40</code> @localization.Localize("and") <code>90</code>.
        </li>
        <li>
            <code>C</code> @localization.Localize("can be placed before") <code>D</code> @localization.Localize("and") <code>M</code> @localization.Localize("to make") <code>400</code> @localization.Localize("and") <code>900</code>.
        </li>
    </ul>
</p>
<br/>
<p>@localization.Localize("Given an integer convert it")</p>

<h4>@localization.Localize("Note")</h4>
<p>@localization.Localize("You can use the url like") <a href="https://apb97.github.io/IntegerToRoman/46#output">https://apb97.github.io/IntegerToRoman/46#output</a> @localization.Localize("to convert") 46 @localization.Localize("to roman numeral"). @localization.Localize("And any number between") 1 @localization.Localize("and") 3999.</p>

<IntegerToRomanComponent Number="Number" OnNumberChanged="OnNumberChanged" />

@code {
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    [Parameter]
    public int? Number { get; set; }

    private void OnNumberChanged(int? number)
    {
        if (number.HasValue)
        {
            Navigation.NavigateTo($"/IntegerToRoman/{number.Value}#{IntegerToRomanComponent.OutputId}");
        }
    }

    private Dictionary<string, string> localization = [];

    protected override async Task OnInitializedAsync()
    {
        localization = await LocalizationFactory.GetLocalization<IntegerToRoman>(Layout.Language ?? System.Globalization.CultureInfo.CurrentUICulture);
    }

    protected override void OnInitialized()
    {
        MainLayout.OnStateChanging += GetResources;
    }

    void IDisposable.Dispose()
    {
        MainLayout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        localization = await LocalizationFactory.GetLocalization<IntegerToRoman>(Layout.Language ?? System.Globalization.CultureInfo.CurrentUICulture);
        StateHasChanged();
    }
}