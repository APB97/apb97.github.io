@page "/CountAndSay"
@page "/CountAndSay/{Number:int?}"
@using Microsoft.Extensions.Localization
@using System.Text
@using apb97.github.io.Shared

@implements IDisposable
@inject APB97StringLocalizer<CountAndSay> localization
@inject NavigationManager Navigation
@inject CountAndSayService Service

@if (ShouldRender())
{
    <PageTitle>Adrian Bieliński - @localization.Localize("Count and say")</PageTitle>

    <h1>@localization.Localize("Count and say")</h1>
    <hr/>
    <h4>@localization.Localize("Challenge description")</h4>
    <p>
        @localization.Localize("The count-and-say sequence is a sequence"):
    </p>
    <ul>
        <li>
            <code>@localization.Localize("functionName") (1) = "1"</code>
        </li>
        <li>
            <code>@localization.Localize("functionName") (n)</code> @localization.Localize("is the way you would 'say' the digit string from")
            <code>@localization.Localize("functionName") (n-1)</code>, @localization.Localize("which is then converted into a different digit string").
        </li>
    </ul>

    <span>@localization.Localize("To determine how you")</span>
    <span>@localization.Localize("Then for each group, say")</span>
    <span>@localization.Localize("To convert the saying")</span>

    <h4>@localization.Localize("Note")</h4>
    <p>@localization.Localize("You can use the url")</p>

    <div>
        <h4>@localization.Localize("Input")</h4>

        <div class="row">
            <div class="card-group">
                <label for="Number" style="margin: 4px">@localization.Localize("NumberOfSayings")</label>
                <InputNumber TValue="int?" Value="Number" ValueExpression="() => Number" ValueChanged="OnNumberChanged" type="number" min="1" max="30" style="margin: 4px" />
            </div>
        </div>

        @{
            var results = GetResults();
        }
        <hr />
        <AdjustedAnchorHeading Id="@OutputId" FontSize="smaller">@localization.Localize("Output")</AdjustedAnchorHeading>
        <div class="row">
            <div class="card-group">
                <label style="margin: 4px">@localization.Localize("Result")</label>

                <code role="status" style="margin: 3px; font-size:large; overflow-wrap: anywhere">
                    @results.result
                </code>
            </div>
        </div>

        <h4>@localization.Localize("Explanation")</h4>
        <div class="row">
            <p role="status">
                @{
                    int i = 1;
                    foreach (var explanation in results.explanation)
                    {
                    <p>
                        <b>@(++i): </b>
                            @explanation
                    </p>
                    }
                }
            </p>
        </div>
    </div>
}

@code 
{
    public const string OutputId = "output";

    [Parameter]
    public int? Number { get; set; }

    private int? prev;

    private void OnNumberChanged(int? number)
    {
        if (number.HasValue && number != Number)
        {
            Navigation.NavigateTo($"/CountAndSay/{number.Value}#{OutputId}");
        }
    }

    protected override bool ShouldRender()
    {
        if (localization.Localization == null) return false;
        return base.ShouldRender();
    }

    protected override async Task OnInitializedAsync()
    {
        await localization.InitializeAsync(LanguageSelect.Culture);
        await Service.InitializeAsync(LanguageSelect.Culture);
    }

    protected override void OnInitialized()
    {
        MainLayout.OnStateChanging += GetResources;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) return;
        if (!Number.HasValue) return;
        var target = $"/CountAndSay/{Number.Value}#{OutputId}";
        if (Number.HasValue && !prev.HasValue)
        {
            Navigation.NavigateTo(target, replace: true);
            prev = Number;
        }
    }

    void IDisposable.Dispose()
    {
        MainLayout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        await localization.InitializeAsync(LanguageSelect.Culture);
        await Service.InitializeAsync(LanguageSelect.Culture);
        StateHasChanged();
    }

    protected (string result, IEnumerable<string> explanation) GetResults()
    {
        if (!Number.HasValue)
        {
            return (string.Empty, Array.Empty<string>());
        }

        try
        {
            var stringBuilder = new StringBuilder();
            var result = Service.CountAndSay(Number.Value, stringBuilder);
            return (result, stringBuilder.ToString().Split("<br/>", StringSplitOptions.RemoveEmptyEntries));
        }
        catch (ArgumentOutOfRangeException)
        {
            return (localization.Localize("Out of range") ?? string.Empty, Array.Empty<string>());
        }
    }
}