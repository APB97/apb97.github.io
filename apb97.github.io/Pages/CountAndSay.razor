@page "/CountAndSay"
@page "/CountAndSay/{Number:int?}"
@using System.Text
@using apb97.github.io.Shared

@implements IDisposable
@inject StringLocalizer<CountAndSay> Loc
@inject NavigationManager Navigation
@inject CountAndSayService Service

@if (ShouldRender())
{
    <PageTitle>Adrian Bieliński - @Loc["Count and say"]</PageTitle>

    <AdjustedAnchorHeading Id="" Heading="@Loc["Count and say"]" />
    <hr/>
    <AdjustedAnchorHeading Id="description" Heading="@Loc["Challenge description"]" FontSize="smaller" />
    <p>
        @Loc["The count-and-say sequence is a sequence"]:
    </p>
    <ul>
        <li>
            <code>@Loc["functionName"] (1) = "1"</code>
        </li>
        <li>
            <code>@Loc["functionName"] (n)</code> @Loc["is the way you would 'say' the digit string from"]
            <code>@Loc["functionName"] (n-1)</code>, @Loc["which is then converted into a different digit string"].
        </li>
    </ul>

    <span>@Loc["To determine how you"]</span>
    <span>@Loc["Then for each group, say"]</span>
    <span>@Loc["To convert the saying"]</span>

    <AdjustedAnchorHeading Id="note" Heading="@Loc["Note"]" FontSize="smaller" />
    <p>@Loc["You can use the url"]</p>

    <div>
        <AdjustedAnchorHeading Id="input" Heading="@Loc["Input"]" FontSize="smaller" />

        <div class="row">
            <div class="card-group">
                <label for="number" style="margin: 4px">@Loc["NumberOfSayings"]</label>
                <InputNumber id="number" TValue="int?" Value="Number" ValueExpression="() => Number" ValueChanged="OnNumberChanged" type="number" min="1" max="30" style="margin: 4px" />
            </div>
        </div>

        @{
            var results = GetResults();
        }
        <hr />
        <AdjustedAnchorHeading Id="@OutputId" FontSize="smaller" Heading="@Loc["Output"]" />
        <div class="row">
            <div class="card-group">
                <span style="margin: 4px">@Loc["Result"]</span>

                <code role="status" style="margin: 3px; font-size:large; overflow-wrap: anywhere">
                    @results.result
                </code>
            </div>
        </div>

        <h4>@Loc["Explanation"]</h4>
        <div class="row">
            <p role="status">
                @{
                    int i = 1;
                    foreach (var explanation in results.explanation)
                    {
                    <p>
                        <b>@(++i): </b>
                            @explanation
                    </p>
                    }
                }
            </p>
        </div>
    </div>
}

@code 
{
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    public const string OutputId = "output";

    [Parameter]
    public int? Number { get; set; }

    private int? prev;

    private void OnNumberChanged(int? number)
    {
        if (number.HasValue && number != Number)
        {
            Navigation.NavigateTo($"/CountAndSay/{number.Value}#{OutputId}");
        }
    }

    protected override bool ShouldRender()
    {
        return Loc.IsReady;
    }

    protected override async Task OnInitializedAsync()
    {
        await Loc.InitializeAsync(Layout.Culture);
        await Service.InitializeAsync(Layout.Culture);
    }

    protected override void OnInitialized()
    {
        Layout.OnStateChanging += GetResources;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) return;
        if (!Number.HasValue) return;
        var target = $"/CountAndSay/{Number.Value}#{OutputId}";
        if (Number.HasValue && !prev.HasValue)
        {
            Navigation.NavigateTo(target, replace: true);
            prev = Number;
        }
    }

    void IDisposable.Dispose()
    {
        Layout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        await Loc.InitializeAsync(Layout.Culture);
        await Service.InitializeAsync(Layout.Culture);
        StateHasChanged();
    }

    protected (string result, IEnumerable<string> explanation) GetResults()
    {
        if (!Number.HasValue)
        {
            return (string.Empty, Array.Empty<string>());
        }

        try
        {
            var stringBuilder = new StringBuilder();
            var result = Service.CountAndSay(Number.Value, stringBuilder);
            return (result, stringBuilder.ToString().Split("<br/>", StringSplitOptions.RemoveEmptyEntries));
        }
        catch (ArgumentOutOfRangeException)
        {
            return (Loc["Out of range"] ?? string.Empty, Array.Empty<string>());
        }
    }
}