@page "/CountAndSay"
@page "/CountAndSay/{Number:int?}"
@using Microsoft.Extensions.Localization
@using apb97.github.io.Shared

@implements IDisposable
@inject APB97StringLocalizerFactory LocalizationFactory
@inject NavigationManager Navigation

<PageTitle>Adrian Bieliński - @localization.Localize("Count and say")</PageTitle>

<h1>@localization.Localize("Count and say")</h1>
<hr/>
<h4>@localization.Localize("Challenge description")</h4>
<p>
    @localization.Localize("The count-and-say sequence is a sequence"):
</p>
<ul>
    <li>
        <code>@localization.Localize("functionName") (1) = "1"</code>
    </li>
    <li>
        <code>@localization.Localize("functionName") (n)</code> @localization.Localize("is the way you would 'say' the digit string from")
        <code>@localization.Localize("functionName") (n-1)</code>, @localization.Localize("which is then converted into a different digit string").
    </li>
</ul>

@localization.Localize("To determine how you")
@localization.Localize("Then for each group, say")
@localization.Localize("To convert the saying")

<h4>@localization.Localize("Note")</h4>
<p>@localization.Localize("You can use the url like") <a href="https://apb97.github.io/CountAndSay/12#output">https://apb97.github.io/CountAndSay/12#output</a> @localization.Localize("for any number between") 1 @localization.Localize("and") 30.</p>

<CountAndSayComponent NumberOfSayings="Number" OnNumberChanged="OnNumberChanged" />

@code {
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    [Parameter]
    public int? Number { get; set; }

    private void OnNumberChanged(int? number)
    {
        if (number.HasValue)
        {
            Navigation.NavigateTo($"/CountAndSay/{number.Value}#{CountAndSayComponent.OutputId}");
        }
    }

    private Dictionary<string, string> localization = [];

    protected override async Task OnInitializedAsync()
    {
        localization = await LocalizationFactory.GetLocalization<CountAndSay>(Layout.Language ?? System.Globalization.CultureInfo.CurrentUICulture);
    }

    protected override void OnInitialized()
    {
        MainLayout.OnStateChanging += GetResources;
    }

    void IDisposable.Dispose()
    {
        MainLayout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        localization = await LocalizationFactory.GetLocalization<CountAndSay>(Layout.Language ?? System.Globalization.CultureInfo.CurrentUICulture);
        StateHasChanged();
    }
}