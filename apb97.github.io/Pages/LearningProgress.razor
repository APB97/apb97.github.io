@using System.Reflection;
@using apb97.github.io.Shared

@implements IDisposable
@inject APB97StringLocalizer<LearningProgress> localization

@if(ShouldRender())
{
    <AdjustedAnchorHeading Id="learning" Heading="@localization.Localize("LearningProgress")">
        <label for="year">@localization.Localize("Year")</label>
        <InputNumber id="year" TValue="int" Value="Year" ValueChanged="OnYearChanged" ValueExpression="() => Year" min="@MinYear" max="@RecentYear" />

        <div>
            @switch (Year)
            {
                case 2024:
                    <LearningProgress2024 />
                    break;
                case 2023:
                    <LearningProgress2023 />
                    break;
                case 2022:
                    <LearningProgress2022 />
                    break;
            }
        </div>
    </AdjustedAnchorHeading>
}

@code {
    [Parameter]
    public int Year { get; set; } = RecentYear;

    private const int MinYear = 2022;
    private const int RecentYear = 2024;

    private Type GetDynamicComponentType(int year)
    {
        var assembly = Assembly.GetAssembly(typeof(LearningProgress2024));
        var currentYearType = assembly?.GetType($"apb97.github.io.Shared.LearningProgress{year}");
        return currentYearType ?? typeof(LearningProgress2024);
    }

    private void OnYearChanged(int year)
    {
        Year = Math.Clamp(year, MinYear, RecentYear);
    }

    protected override bool ShouldRender()
    {
        return localization.IsReady;
    }

    protected override async Task OnInitializedAsync()
    {
        await localization.InitializeAsync(LanguageSelect.Culture);
    }

    protected override void OnInitialized()
    {
        MainLayout.OnStateChanging += GetResources;
    }

    void IDisposable.Dispose()
    {
        MainLayout.OnStateChanging -= GetResources;
    }

    private async Task GetResources()
    {
        await localization.InitializeAsync(LanguageSelect.Culture);
        StateHasChanged();
    }
}